import cors from 'cors'
import dotenv from 'dotenv'
import express, {Request as ExpressRequest, Response as ExpressResponse} from 'express'
import {createServer as createViteServer} from 'vite'
import type {ViteDevServer} from 'vite'
import * as fs from 'fs'
import * as path from 'path'
import {createClientAndConnect} from './db'
import {forumCallback} from './routes/Forum'
import {dbConnect} from './initDatabase'
import {TopicReaction} from './models/reaction'

dotenv.config()

const isDev = () => process.env.NODE_ENV === 'development'

async function startServer() {
	await dbConnect()
	const app = express()
	app.use(cors())
	const port = Number(process.env.SERVER_PORT) || 3001
	createClientAndConnect()

	let vite: ViteDevServer | undefined
	const distPath = path.dirname(require.resolve('client/dist/index.html'))
	const srcPath = path.dirname(require.resolve('client/index.html'))
	const ssrClientPath = require.resolve('client/ssr-dist/client.cjs')

	if (isDev()) {
		vite = await createViteServer({
			server: {middlewareMode: true},
			root: srcPath,
			appType: 'custom'
		})

		app.use(vite.middlewares)
	}

	// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π –∫ —Ç–æ–ø–∏–∫—É
	const getAllTopicReactions = async (
		req: ExpressRequest,
		res: ExpressResponse
	): Promise<void> => {
		const {topicID}: {topicID?: number} = req.query
		console.log('topicId: ', topicID)

		try {
			const topicReactions = await TopicReaction.findOne({
				where: {
					topic_id: topicID
				}
			})

			if (topicReactions) {
				console.log(`Reactions of topic ${topicID}: ${topicReactions.reactions}`)

				res.status(200).json({reactions: topicReactions.reactions})
			} else {
				res.status(404).json({error: '–†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Ç–æ–ø–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'})
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã TopicReaction:', error)

			res.status(500).json({error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–π'})
		}
	}

	// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Ç–æ–ø–∏–∫—É
	const createTopicReaction = async (
		req: ExpressRequest,
		res: ExpressResponse
	): Promise<void> => {
		const {topicId, reaction}: {topicId: number; reaction: string[]} = req.body

		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ç–æ–ø–∏–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏
			const existingTopicReaction = await TopicReaction.findOne({
				where: {
					topic_id: topicId
				}
			})

			if (existingTopicReaction) {
				// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∞–∫—Ü–∏–π –∫ –º–∞—Å—Å–∏–≤—É —Ä–µ–∞–∫—Ü–∏–π
				existingTopicReaction.reactions = existingTopicReaction.reactions.concat(reaction)
				await existingTopicReaction.save()
			} else {
				// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
				const newTopicReaction = TopicReaction.build({
					topic_id: topicId,
					reactions: reaction
				})
				await newTopicReaction.save()
			}

			console.log(`–†–µ–∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Ç–æ–ø–∏–∫—É ${topicId}`)

			res.status(200).json({message: `–†–µ–∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Ç–æ–ø–∏–∫—É ${topicId}`})
		} catch (error) {
			console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–π –∫ —Ç–æ–ø–∏–∫—É ${topicId}`)

			res.status(500).json({error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–π –∫ —Ç–æ–ø–∏–∫—É ${topicId}`})
		}
	}

	// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –¥–∞–Ω–Ω—ã—Ö
	app.use(express.json())

	// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Ç–æ–ø–∏–∫—É
	app.post('/api/emojis/add', createTopicReaction)

	// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π –∫ —Ç–æ–ø–∏–∫—É
	app.get('/api/emojis/get', getAllTopicReactions)

	app.get('/api', (_, res) => {
		res.json('üëã Howdy from the server :)')
	})

	if (!isDev()) {
		app.use('/assets', express.static(path.resolve(distPath, 'assets')))
	}

	app.get('/user', (_, res) => {
		res.json({login: '–°—Ç–µ–ø–∞', password: '–°—Ç–µ–ø–∞–Ω–æ–≤'})
	})

	app.get('/forum123', forumCallback)

	app.use('*', async (req, res, next) => {
		const url = req.originalUrl

		try {
			let template: string

			if (!isDev()) {
				template = fs.readFileSync(path.resolve(distPath, 'index.html'), 'utf-8')
			} else {
				template = fs.readFileSync(path.resolve(srcPath, 'index.html'), 'utf-8')

				template = await vite!.transformIndexHtml(url, template)
			}

			let render: (req: ExpressRequest) => Promise<{html: string; initialState: unknown}>

			if (!isDev()) {
				render = (await import(ssrClientPath)).render
			} else {
				render = (await vite!.ssrLoadModule(path.resolve(srcPath, 'ssr.tsx'))).render
			}

			const {html: appHtml, initialState} = await render(req)

			const html = template
				.replace(`<!--ssr-outlet-->`, appHtml)
				.replace(
					`<!--ssr-initial-state-->`,
					`<script>window.APP_INITIAL_STATE = ${JSON.stringify(initialState)}</script>`
				)

			// console.log({html})

			res.status(200).set({'Content-Type': 'text/html'}).end(html)
		} catch (e) {
			if (isDev()) {
				vite!.ssrFixStacktrace(e as Error)
			}
			next(e)
		}
	})

	app.listen(port, () => {
		console.log(`  ‚ûú üé∏ Server is listening on port: ${port}`)
	})
}

startServer()
